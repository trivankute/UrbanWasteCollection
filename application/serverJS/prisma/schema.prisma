// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  name         String?
  password     String
  salt         String
  role         String    @default("user")
  age          Int?
  address      String?
  nationality  String?
  image        String? @default("https://res.cloudinary.com/dotr7u5kq/image/upload/v1655879064/cld-sample.jpg")
  birthday     String?
  gender       String?
  phone        String?
  state        String    @default("nothing")
  checkin      Boolean   @default(false)
  checkinTime  DateTime?
  checkout     Boolean   @default(false)
  checkoutTime DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  vehicle      Vehicle?  @relation(fields: [vehicleId], references: [id], onUpdate: Cascade)
  vehicleId    String?   @db.ObjectId
  reviews      Review[]
  disposalFactory DisposalFactory? @relation(fields: [disposalId], references: [id], onUpdate: Cascade)
  disposalId   String?   @db.ObjectId
}

// model vehicle
model Vehicle {
  id                       String           @id @default(auto()) @map("_id") @db.ObjectId
  numberPlate              String           @unique
  maxWorkerSlot            Int              @default(4)
  capacity                 Int              @default(0)
  fuel                     Int              @default(100)
  state                    String           @default("nothing") // in progress
  type                     String?          @default("nothing")
  currentMovingPointIndex        Int? @default(0)
  currentDisposalFactory   DisposalFactory? @relation(fields: [currentDisposalFactoryId], references: [id], onUpdate: Cascade)
  currentDisposalFactoryId String?          @db.ObjectId
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  workers                  User[]
  task Task? 
  doneTasks DoneTasks[]
}

model Task {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String           
  type              String
  state             String           @default("in progress")
  accept Boolean @default(false)
  routes            String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  doneAt            DateTime?
  vehicle           Vehicle?         @relation(fields: [vehicleId], references: [id], onUpdate: Cascade)
  vehicleId         String?          @db.ObjectId @unique
  disposalFactories   DisposalFactory[] @relation(fields: [disposalFactoriesIds], references: [id])
  disposalFactoriesIds String[]        @db.ObjectId
  mcps MCP[] @relation(fields: [mcpIds], references: [id])
  mcpIds String[] @db.ObjectId
  mcpPreviousCapacitys Int[]
  mcpResultCapacitys Int[]
}

model DoneTasks {
  id                String           @id @map("_id") @db.ObjectId
  name              String           
  type              String
  state             String           @default("done")
  accept Boolean @default(true)
  routes            String[]
  createdAt         DateTime         
  updatedAt         DateTime         
  doneAt            DateTime?
  vehicle          Vehicle?         @relation(fields: [vehicleId], references: [id], onUpdate: Cascade)
  vehicleId         String?       @db.ObjectId
  disposalFactories   DisposalFactory[] @relation(fields: [disposalFactoriesIds], references: [id])
  disposalFactoriesIds String[]        @db.ObjectId
  mcps MCP[] @relation(fields: [mcpIds], references: [id])
  mcpIds String[] @db.ObjectId
  mcpPreviousCapacitys Int[]
  mcpResultCapacitys Int[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId    String?  @db.ObjectId
}

model MCP {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  capacity     Int      @default(0)
  addressPoint String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tasks         Task[]  @relation(fields: [taskIDs], references: [id])
  taskIDs      String[] @db.ObjectId
  doneTasks         DoneTasks[] @relation(fields: [doneTasksIDs], references: [id])
  doneTasksIDs      String[] @db.ObjectId
}

model DisposalFactory {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String    @unique
  addressPoint String    @unique
  image        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  vehicles     Vehicle[]
  users User[]
  tasks        Task[] @relation(fields: [tasksIDs], references: [id])
  tasksIDs     String[] @db.ObjectId
  doneTasks        DoneTasks[] @relation(fields: [doneTasksIDs], references: [id])
  doneTasksIDs     String[] @db.ObjectId
}
