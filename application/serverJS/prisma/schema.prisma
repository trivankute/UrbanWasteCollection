// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  salt String
  role      String @default("user")
  age       Int?
  address String?
  nationality String?
  image String?
  birthday String?
  gender String?
  state     String    @default("nothing")
  checkin Boolean @default(false)
  checkout Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String?   @db.ObjectId
  reviews   Review[]
}

// model vehicle
model Vehicle {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  capacity Int @default(100)
  fuel Int @default(100)
  state     String    @default("nothing")
  type String? @default("nothing")
  currentPlace String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  tasks     Task[]
}

model Task {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique
  type      String
  state     String    @default("in progress")
  routes    String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  doneAt    DateTime?
  vehicle   Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String?   @db.ObjectId
  mcps      MCP[]

}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
}

model MCP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  capacity Int @default(0)
  address String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?  @db.ObjectId
}